<import name="title-bar" src="../../components/TitleBar/TitleBar.ux"></import>
<import name="reply" src="../../components/Reply/Reply.ux"></import>
<import name="full-screen-input" src="../../components/FullScreenInput/FullScreenInput.ux"></import>
<import
  name="floating-page-changer"
  src="../../components/FloatingPageChanger/FloatingPageChanger.ux"
></import>

<template>
  <div class="page">
    <title-bar title="{{titletext}}"></title-bar>
    <image style="position: absolute; margin-top: 245px" if="{{show_loading}}" src="{{anims.loading_src.value}}"></image>
    <list style="margin-top: 15px" class="replylist">
      <list-item type="replies"
        style="width: 100%; justify-content: center; margin-top: 10px; height: {{PlaceHolderShowCheck($item.rpid)}}"
        for="{{replies}}">
        <reply reply="{{$item}}" @show-tools="ShowTools" @reply="Reply"></reply>
      </list-item>
    </list>
    <floating-page-changer current_pn="{{current_pn}}" @backpn="BackPN" @nextpn="NextPN"></floating-page-changer>
    <full-screen-input input_text={{input_text}} if="{{replymode}}" @complete="InputComplete" @delete="InputDelete" @send="SendReply"
      @exit="ExitInput"></full-screen-input>
  </div>
</template>

<script>
import router from "@system.router"
import prompt from "@system.prompt"
export default {
  public: {
    type: 1,
    oid: "",
    replycount: 0,
    rootrpid: "",
    secmode: false
  },
  private: {
    titletext: "评论区",
    replies: [],
    maxpn: 1,
    current_pn: 1,
    show_loading: false,
    anims: {
      loading: null,
      loading_src: {value: "/common/seqanims/loadingWhite/icons8-loading_颜色反转-1.png"}
    },
    replymode: false,
    reply_target: null,
    input_text: {
      // 使用Object，保持子组件和父组件的数据传递
      content: ""
    }
  },
  async SendReply() {
    this.replymode = false
    var result = null
    if (this.input_text.content.length > 0) {
      if (this.secmode) {
        result = await this.$app.$def.biliclient.GiveTreeReply(
          this.type,
          this.oid,
          this.reply_target,
          this.rootrpid,
          this.input_text.content
        )
      } else {
        result = await this.$app.$def.biliclient.GiveSecReply(
          this.type,
          this.oid,
          this.reply_target,
          this.input_text.content
        )
      }
      if (result.code == 0) {
        prompt.showToast({
          message: "发送成功"
        })
      } else {
        prompt.showToast({
          message: "发送失败，错误代码：" + result.code + " 原因：" + result.message,
          duration: 4000
        })
      }
    } else {
      prompt.showToast({
        message: "评论内容不得为空！",
        duration: 2000
      })
    }
  },
  ExitInput() {
    this.replymode = false
  },
  InputComplete(evt) {
    this.input_text.content += evt.detail.content
  },
  InputDelete() {
    this.input_text.content = this.input_text.content.slice(0, -1)
  },
  Reply(evt) {
    this.replymode = true
    this.input_text.content = ""
    this.reply_target = evt.detail.rpid
  },
  ShowTools(evt) {
    if (!this.secmode) {
      router.push({
        uri: "pages/replytools",
        params: {
          type: this.type,
          oid: this.oid,
          reply: evt.detail.reply
        }
      })
    } else {
      router.push({
        uri: "pages/textdetail",
        params: {
          text: evt.detail.reply.content.message,
          titletext: "评论详情"
        }
      })
    }
  },
  PlaceHolderShowCheck(rpid) {
    if (rpid == this.replies[this.replies.length - 1].rpid) {
      return "315px"
    }
    return "200px"
  },
  NextPN() {
    if (this.current_pn != this.maxpn) {
      this.current_pn++
      this.LoadReplies()
    }
  },
  BackPN() {
    if (this.current_pn != 1) {
      this.current_pn--
      this.LoadReplies()
    }
  },
  async LoadReplies() {
    this.replies = []
    this.show_loading = true
    this.anims.loading.start()
    if (this.secmode) {
      this.replies = (
        await this.$app.$def.biliclient.getSecReplies(
          this.type,
          this.oid,
          this.rootrpid,
          this.current_pn
        )
      ).replies
    } else {
      this.replies = (
        await this.$app.$def.biliclient.getReplies(this.type, this.oid, this.current_pn)
      ).replies
    }
    this.anims.loading.stop()
    this.show_loading = false
    global.runGC()
  },
  onInit() {
    this.maxpn = Math.ceil(this.replycount / 10)
    console.log("maxpn=" + this.maxpn)

    this.anims.loading = new this.$app.$def.animengine.SequenceAnim(
      "replysPage",
      this.anims.loading_src,
      28,
      "/common/seqanims/loadingWhite/icons8-loading_颜色反转-*.png",
      1000,
      true
    )

    if (this.secmode) {
      this.titletext = "子评论"
    }

    this.LoadReplies()
  }
}
</script>

<style>
.page {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  position: absolute;
  width: 100%;
}

.replylist {
  width: 77%;
  height: 75%;
  align-items: center;
  justify-content: center;
}

.inputpanel {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: black;
  justify-content: center;
}

.inputactions {
  flex-direction: row;
  align-items: center;
  width: 50%;
  position: absolute;
  margin-top: 30px;
}

.inputaction_img {
  width: 35px;
  height: 35px;
  object-fit: scale-down;
}

.inputshow {
  width: 65%;
  position: absolute;
  margin-top: 100px;
}

.inputshow_text {
  font-size: 24px;
}
</style>