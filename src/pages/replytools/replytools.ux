<import name="title-bar" src="../../components/TitleBar/TitleBar.ux"></import>

<template>
    <div class="page">
        <title-bar title="评论"></title-bar>
        <div class="toolbtn" style="margin-top: 30px" @click="LikeReply()">
            <div class="dataicon" style="margin-left: 25px">
                <image class="toolicon" src="/common/replytools_like.png"></image>
            </div>
            <text class="toolname" style="margin-left: 92px; position: absolute">点赞该评论</text>
        </div>
        <div class="toolbtn" style="margin-top: 10px" @click="ShowSecReplies()">
            <div class="dataicon" style="margin-left: 25px">
                <image class="toolicon" src="/common/replytools_showreplies.png"></image>
            </div>
            <text class="toolname" style="margin-left: 92px; position: absolute">查看回复</text>
        </div>
        <div class="toolbtn" style="margin-top: 10px" @click="ShowDetail()">
            <div class="dataicon" style="margin-left: 25px">
                <image class="toolicon" src="/common/replytools_showdetail.png"></image>
            </div>
            <text class="toolname" style="margin-left: 92px; position: absolute">查看详情</text>
        </div>
    </div>
</template>

<script>
import router from "@system.router"
import prompt from "@system.prompt"
export default {
  public: {
    type: 0,
    oid: "",
    reply: null
  },
  private: {
    replymessage: ""
  },
  async LikeReply() {
    var result = await this.$app.$def.biliclient.LikeReply(this.type, this.oid, this.reply.rpid, 1)
    console.log(result)
    if (result.code == 0) {
      prompt.showToast({
        message: "点赞成功！"
      })
    } else {
      prompt.showToast({
        message: "点赞失败...错误代码：" + result.code + " 报错信息：" + result.message,
        duration: 4000
      })
    }
  },
  ShowDetail() {
    router.push({
      uri: "pages/textdetail",
      params: {
        text: this.replymessage
      }
    })
  },
  ShowSecReplies() {
    router.push({
      uri: "pages/replys",
      params: {
        type: this.type,
        oid: this.oid,
        replycount: this.reply.rcount,
        rootrpid: this.reply.rpid,
        secmode: true
      }
    })
  },
  onInit() {
    this.reply = JSON.parse(this.reply)
    this.replymessage = this.reply.content.message
  }
}
</script>

<style>
.page {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    position: absolute;
    width: 100%;
}

.toolbtn {
    width: 280px;
    height: 80px;
    border-radius: 25px;
    flex-direction: row;
    align-items: center;
    background-color: #262626;
}

.dataicon {
    align-items: center;
    justify-content: center;
    flex-direction: column;
}

.toolicon {
    width: 35px;
    height: 39px;
    object-fit: scale-down;
}

.toolname {
    font-size: 30px;
    font-weight: 600;
}
</style>